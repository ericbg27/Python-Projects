-> Functions and classes can have a docstring

Ex:

def my_func():
	'''
	DOCSTRING: Function description
	# Rest of description (inputs, outputs, etc)
	'''

Object Oriented Programming in Python 3

-> General structure

class NameOfClass():

	def __init__(self,param1,param2): #constructor
		self.param1 = param1 		  #self is a reference to the object itself
		self.param2 = param2

	def some_method(self):
		#perform some action
		print(Self.param1)

-> Capitalized names for classes and names with underscores for functions and variables (generally)

-> Example of class with attributes

class Dog():

	def __init__(self,breed,name,spots):

		# Attributes
		# We take in the argument
		# Assign it using self.attribute_name
		self.breed = breed
		self.name = name

		# Expect boolean True/False
		self.spots = spots

# CREATING AN OBJECT
my_dog = Dog(breed='Lab', name='Sammy',spots=False)
# OR
my_dog = Dog('Lab', 'Sammy', False)

-> Other details on attributes and details on methods

class Dog():

	# CLASS OBJECT ATTRIBUTE
	# SAME FOR ANY INSTANCE OF A CLASS
	species = 'mammal'

	def __init__(self,breed,name):

		# Attributes
		# We take in the argument
		# Assign it using self.attribute_name
		self.breed = breed
		self.name = name

	# OPERATIONS/Actions ---> Methods
	def bark(selfn, number):
		print("WOOF! My name is {} and the number is {}".format(self.name, number))

my_dog = Dog('Lab', 'SAMMY')
my_dog.bark(10)

-> More details on methods

class Circle():
	
	# CLASS OBJECT ATTRIBUTE
	pi = 3.14

	def __init__(self, radius=1): # radius has a default value (if radius not given, use 1)

		self.radius = radius
		self.area = radius*radius*Circle.pi # Attribute doesn't have to be given
											# pi is not only for this object but for all circles
	def get_circumference(self):
		return self.radius * self.pi * 2

my_circle = Circle() # radius = 1
# OR
my_circle = Circle(30) # radius = 30
my_circle.get_circumference()

-> Inheritance

# BASE CLASS
class Animal():

	def __init__(self):
		print("ANIMAL CREATED")

	def who_am_i(self):
		print("I am an animal")

	def eat(self):
		print("I am eating")

# DERIVED CLASS
class Dog(Animal):

	def __init__(self):
		Animal.__init__(self)
		print("Dog Created")

	def who_am_i(self): # Function of base class redefined
		print("I am a dog!") 

	def eat(self): # Function of base class redefined
		print("I am a dog and eating")

	def bark(self):
		print("WOOF!") #Creation of new method

my_dog = Dog()
# OUTPUT
# 1: ANIMAL CREATED
# 2: Dog Created

mydog.who_am_i()
# OUTPUT
# 1: I am a dog!

-> Polymorphism

Class Dog():

	def __init__(self, name):
		self.name = name

	def speak(self):
		return self.name + " says woof!"

Class Cat():

	def __init__(self, name):
		self.name = name

	def speak(self):
		return self.name + " says meow!"

niko = Dog("niko")
felix = Cat("felix")

print(niko.speak())
# OUTPUT
# 1: niko says woof!

print(felix.speak())
# OUTPUT
# 2: felix says meow!

for pet in [niko, felix]:

	print(type(pet))
	print(pet.speak)

def pet_speak(pet):
	print(pet.speak()) #If a dog is passed says woof. If a car is passed says meow

- Abstract class

class Animal(): #Never expects to be directly called
	
	def __init__(self,name):
		self.name = name

	def speak(self):
		raise NotImplementedError("Subclass must implment this abstract method")

class Dog(Animal):

	def speak(self):
		return self.name + " says woof!"

class Cat(Animal):

	def speak(self):
		return self.name + " says meow!"

fido = Dod("Fido")
isis = Cat("Isis")

print(fido.speak())
# OUTPUT
# 1: Fido says woof!

print(isis.speak())
# OUTPUT
# 2: Isis says meow

-> Special methods

mylist = [1,2,3]
len(mylist)
# OUTPUT
# 1: 3

class Sample():
	pass

mysample = Sample()

len(mysample)
# ERROR!

- Usage example

class Book():

	def __init__(self,title,author,pages):
		self.title = title
		self.author = author
		self.pages = pages

	def __str__(self): # Redefining existing str method
		return f"{self.title} by {self.author}"

	def __len__(self): # Redefining existing len method
		return self.pages

	def __del__(self): # Redefining existing del method
		print("A book object has been deleted")

b = Book('Python rocks','Jose',200)

print(b) # Only works because of __str__ method, otherwise it would have given an error 
# OUTPUT
# Python rocks by Joe

del b # Would have worked without redefinition but it would print nothing
	  # With redefinition it deletes and prints